/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * User API
 * A simple user management API
 * OpenAPI spec version: 1.0
 */
import { customInstance } from './apiClient';
/**
 * Authentication response
 */
export interface ModelAuthResponseDto {
  accessToken: string;
  email: string;
  firstName: string;
  id: string;
  lastName: string;
}

/**
 * API error
 */
export interface ModelErrorResponseDto {
  error: string;
}

/**
 * Data for user login
 */
export interface ModelLoginRequestDto {
  /** Email of the user */
  email: string;
  /**
   * Password
   * @minLength 8
   */
  password: string;
}

/**
 * Response for refreshed access token
 */
export interface ModelRefreshTokenResponseDto {
  accessToken: string;
}

/**
 * Data for user registration
 */
export interface ModelRegisterRequestDto {
  /** Email of the user */
  email: string;
  /** First name of the user */
  firstName: string;
  /** Last name of the user */
  lastName: string;
  /**
   * Password (at least 8 characters, only English letters and digits)
   * @minLength 8
   */
  password: string;
}

export interface ModelUserResponseDto {
  email: string;
  firstName: string;
  id: string;
  lastName: string;
}

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];


  /**
 * Authenticate user by email and password
 * @summary Authenticate user by credentials
 */
export const postApiV1AuthLoginCredentials = (
    modelLoginRequestDto: ModelLoginRequestDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ModelAuthResponseDto>(
      {url: `/api/v1/auth/login/credentials`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: modelLoginRequestDto
    },
      options);
    }
  
/**
 * Authenticate user by JWT token using the Authorization header
 * @summary Authenticate user by JWT token
 */
export const postApiV1AuthLoginJwt = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ModelUserResponseDto>(
      {url: `/api/v1/auth/login/jwt`, method: 'POST'
    },
      options);
    }
  
/**
 * Refresh access token using a valid refresh token from cookie
 * @summary Refresh access token
 */
export const postApiV1AuthRefresh = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ModelRefreshTokenResponseDto>(
      {url: `/api/v1/auth/refresh`, method: 'POST'
    },
      options);
    }
  
/**
 * Register a new user with the provided data
 * @summary Register a new user
 */
export const postApiV1AuthRegister = (
    modelRegisterRequestDto: ModelRegisterRequestDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ModelUserResponseDto>(
      {url: `/api/v1/auth/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: modelRegisterRequestDto
    },
      options);
    }
  
export type PostApiV1AuthLoginCredentialsResult = NonNullable<Awaited<ReturnType<typeof postApiV1AuthLoginCredentials>>>
export type PostApiV1AuthLoginJwtResult = NonNullable<Awaited<ReturnType<typeof postApiV1AuthLoginJwt>>>
export type PostApiV1AuthRefreshResult = NonNullable<Awaited<ReturnType<typeof postApiV1AuthRefresh>>>
export type PostApiV1AuthRegisterResult = NonNullable<Awaited<ReturnType<typeof postApiV1AuthRegister>>>
